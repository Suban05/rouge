#!/usr/bin/executor

метод Скрипт()
    Консоль.Записать("Привет, мир!")
    Консоль.Записать(МойМетод(а, &Квадрат))
    // Переменная c — переменная функционального типа (Число)->Число со значением x->x*x
    пер c: (Число)->Число = x -> x * x
    // 3-й аргумент — значение функционального типа (Число, Число)->Булево
    Сравнить(2, 3, (x, y) -> x == y)

    // Параметр z — параметр функционального типа
    метод Сравнить(x: Число, y: Число, z: (Число, Число)->Булево)
    ;
;

структура Продажа
    обз пер Товар: Строка
    обз пер Дата: Дата

    // Простой метод
    метод ВСтроку(): Строка
        пер Версии = новый Массив<Версия>
        возврат Байты{4D5A}
    ;

    // Статический метод
    статический метод ИзСтроки(СтрокаПродажи: Строка): Продажа
        знч Части = СтрокаПродажи.Разделить(" ")
        Консоль.Записать("Сейчас %{Время.Сейчас() | ЧЧ:мм}")
        возврат новый Продажа(Части[0], новый Дата(Части[1]))
    ;
;

/* Алгоритм на основании анализа
   типа данных заменяет их
   на данные, удаляющие информацию
   из узла, в котором их
   не должно быть. */
метод ЗаписатьВXML()
   исп ПотокЗаписи =
      новый Файл("C:\\test\\test.xml")
         .ОткрытьПотокЗаписи()
   пер Запись = новый ЗаписьXml(ПотокЗаписи)
   Запись.ЗаписатьНачалоЭлемента("product")
      .ЗаписатьАтрибут("code", "138")
      .ЗаписатьНачалоЭлемента("description")
         .ЗаписатьТекст("Холодильник")
      .ЗаписатьКонецЭлемента()
      .ЗаписатьНачалоЭлемента("price")
         .ЗаписатьТекст("30000")
      .ЗаписатьКонецЭлемента()
      .ЗаписатьНачалоЭлемента("count")
         .ЗаписатьТекст("20")
      .ЗаписатьКонецЭлемента()
   .ЗаписатьКонецЭлемента()
;

метод МногострочныеСтроки(): Строка
    пер МногоСтрочноеЗначение =
        1         2
    12345678901234567890
    " первая подстрока
    вторая подстрока
    третья подстрока"
    пер МногоСтрочноеЗначение = " первая подстрока\нвтораяподстрока\н  третья подстрока"
    знч СтрокаXml =
    "<note>
    <heading>Описание объектной модели</heading>
    <body>В основании всей иерархии типов лежит тип Объект.</body>
    </note>"
    возврат СтрокаXml
;

метод ИнтерполяцияСтрок()
    знч Длина = 10
    знч Ширина = 11
    пер Сообщение = "Площадь равна %{Длина * Ширина} м2"

    знч Стр_Значение = Истина
    знч Стр_Дата = Дата{2020-12-11}
    знч Стр_Конкат = "" + Стр_Значение                             // "true"
    знч Стр_Интер1 = "%Стр_Значение"                               // "true"
    знч Стр_Интер2 = "$Стр_Значение"                               // "Истина"
    знч Стр_Интер3 = "%{Стр_Значение}"                             // "true"
    знч Стр_Интер4 = "${Стр_Значение}"                             // "Истина"
    знч Стр_Интер5 = "${Стр_Дата|дд}"                              // "11"
    знч Стр_Интер6 = "${Стр_Дата|дд ММММ гггг, дддд}"              // "11 декабря 2020, пятница"
;

метод ПроверитьРегулярныеВыражения()
    пер РегВыр = новый Образец("(\\ц{2}-){2}")
    пер СтрокаОбразца = РегВыр.ВСтроку()   //СтрокаОбразца = (\ц{2}-){2}
    пер Данные = "логин!3пароль1*27"
    пер РегВыр = '\с+'
    пер Совпадения = РегВыр.НайтиСовпадения(Данные)
    для ОчередноеСовпадение из Совпадения
    ПодСтрока = ОчередноеСовпадение.Значение()
;

метод Квадрат(а: Число): Число
    возврат а * а
;

@мояАннотация
метод МойМетод(а: Число, Формула: (Число)->Число): Число
    возврат Формула(а)
;

метод ДлинаСтроки(строка: Строка): Число
    возврат строка.Длина()
;

метод тест()
    знч Длина1 = &ДлинаСтроки         // (Строка)->Число
    знч Длина2 = &ДлинаСтроки(Строка) // (Строка)->Число
;

метод тестГлобальныйКонтекст()
    &ОбщийМодуль1.Метод1(Строка) // (Строка)->Число
;

метод тестЛокальнаяПеременная()
    пер Массив1 = <Число>[]
    пер добавить = &Массив1.Добавить // (Число)->Булево

    добавить(1) // Добавляет в массив
;
